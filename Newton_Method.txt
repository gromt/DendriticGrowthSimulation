                            ////// Поиск корней V, k, m методом Ньютона ////////////////////////////////////////////

                            epsilone = 0.001;
                            bool stop = false;
                            UserCells[i, j].kk = 1;
                            UserCells[i, j].V = 1.2;
            
                            double[,] J = new double[3, 3];
                            double[,] A1 = new double[3, 3];
                            double[,] A2 = new double[3, 3];
                            double[,] A3 = new double[3, 3];
                            
                            double b = UserCells[i, j].b; // Для упрощения записи ниже лежащих формул.
                            double Cn = UserCells[i, j].Cn;

                            TConst = TConst + (GibsTompson * UserCells[i, j].K * (1 - 15 * UserCells[i, j].b * Math.Cos(4 * (Angle1 - Angle0)))) / TD;//

                            while (stop == false)
                            {
                                double kk = UserCells[i, j].kk; // Сохранение предыдущего значения переменных для определения точности поиска решения.
                                double V = UserCells[i, j].V;
                                double m = UserCells[i, j].m; // Размерный                                

                                // Матрица Якобиана.

                                J[0, 0] = -1;
                                J[1, 0] = ((-1 * (2 - 2*V) * kke + r) / (-1 * V * V + V * r + 1)) - (((1 - V) * (1 - V) * kke + V * r) * (-2 * V + r) / Math.Pow((-1 * V * V + V * r + 1), 2));
                                J[2, 0] = 0;

                                J[0, 1] = (-1 + 1/kk - (2 - 2*kk)*V)/(1-kke);
                                J[1, 1] = (Math.Pow((1 - kk), 2)) / (1 - kke);
                                J[2, 1] = -1 / Me;

                                J[0, 2] = 0;
                                J[1, 2] = -1;
                                J[2, 2] = b * (C0 / TD - (C0 - Cn) / TD);

                                /////////////////////////////////////

                                // f1 = (((1 - V) * (1 - V) * kke + V * r) / (- 1 * V * V + V * r + 1)) - kk;
                                // f2 = ((1 - kk + Math.Log(kk / kke) + (1 - kk) * (1 - kk) * V) / (1 - kke)) - m / Me;
                                // f3 = b * (TConst - ((C0 - Cn) * m) / TD - (C0 * (Me - m)) / TD) - V;

                                // Матрица A1.

                                A1[0, 0] = (((1 - V) * (1 - V) * kke + V * r) / (- 1 * V * V + V * r + 1)) - kk;
                                A1[1, 0] = ((-1 * (2 - 2 * V) * kke + r) / (-1 * V * V + V * r + 1)) - (((1 - V) * (1 - V) * kke + V * r) * (-2 * V + r) / Math.Pow((-1 * V * V + V * r + 1), 2));
                                A1[2, 0] = 0;

                                A1[0, 1] = ((1 - kk + Math.Log(kk / kke) + (1 - kk) * (1 - kk) * V) / (1 - kke)) - m / Me;
                                A1[1, 1] = (Math.Pow((1 - kk), 2)) / (1 - kke);
                                A1[2, 1] = -1 / Me;

                                A1[0, 2] = b * (TConst - ((C0 - Cn) * m) / TD - (C0 * (Me - m)) / TD) - V; 
                                A1[1, 2] = -1;
                                A1[2, 2] = b * (C0 / TD - (C0 - Cn) / TD);

                                /////////////////////////////////////

                                // f1 = (((1 - V) * (1 - V) * kke + V * r) / (- 1 * V * V + V * r + 1)) - kk;
                                // f2 = ((1 - kk + Math.Log(kk / kke) + (1 - kk) * (1 - kk) * V) / (1 - kke)) - m / Me;
                                // f3 = b * (TConst - ((C0 - Cn) * m) / TD - (C0 * (Me - m)) / TD) - V;

                                // Матрица A2.

                                A2[0, 0] = -1;
                                A2[1, 0] = (((1 - V) * (1 - V) * kke + V * r) / (-1 * V * V + V * r + 1)) - kk;
                                A2[2, 0] = 0;

                                A2[0, 1] = (-1 + 1 / kk - (2 - 2 * kk) * V) / (1 - kke);
                                A2[1, 1] = ((1 - kk + Math.Log(kk / kke) + (1 - kk) * (1 - kk) * V) / (1 - kke)) - m / Me;
                                A2[2, 1] = -1 / Me;

                                A2[0, 2] = 0;
                                A2[1, 2] = b * (TConst - ((C0 - Cn) * m) / TD - (C0 * (Me - m)) / TD) - V;
                                A2[2, 2] = b * (C0 / TD - (C0 - Cn) / TD);

                                /////////////////////////////////////

                                // f1 = (((1 - V) * (1 - V) * kke + V * r) / (- 1 * V * V + V * r + 1)) - kk;
                                // f2 = ((1 - kk + Math.Log(kk / kke) + (1 - kk) * (1 - kk) * V) / (1 - kke)) - m / Me;
                                // f3 = b * (TConst - ((C0 - Cn) * m) / TD - (C0 * (Me - m)) / TD) - V;

                                // Матрица A3.

                                A3[0, 0] = -1;
                                A3[1, 0] = ((-1 * (2 - 2 * V) * kke + r) / (-1 * V * V + V * r + 1)) - (((1 - V) * (1 - V) * kke + V * r) * (-2 * V + r) / Math.Pow((-1 * V * V + V * r + 1), 2));
                                A3[2, 0] = (((1 - V) * (1 - V) * kke + V * r) / (-1 * V * V + V * r + 1)) - kk;

                                A3[0, 1] = (-1 + 1 / kk - (2 - 2 * kk) * V) / (1 - kke);
                                A3[1, 1] = (Math.Pow((1 - kk), 2)) / (1 - kke);
                                A3[2, 1] = ((1 - kk + Math.Log(kk / kke) + (1 - kk) * (1 - kk) * V) / (1 - kke)) - m / Me;

                                A3[0, 2] = 0;
                                A3[1, 2] = -1;
                                A3[2, 2] = b * (TConst - ((C0 - Cn) * m) / TD - (C0 * (Me - m)) / TD) - V;

                                /////////////////////////////////////
                                
                                // Расчет новых приближений k, V, m.

                                UserCells[i, j].V  = V  - alglib.rmatrixdet(A2) / alglib.rmatrixdet(J);
                                UserCells[i, j].m  = m  - alglib.rmatrixdet(A3) / alglib.rmatrixdet(J); 
                                
                                if (UserCells[i, j].V >= 1)
                                { UserCells[i, j].kk = 1; } else { UserCells[i, j].kk = kk - alglib.rmatrixdet(A1) / alglib.rmatrixdet(J); }

                                if (UserCells[i, j].kk <= 0)
                                { }

                                if ((Math.Abs(UserCells[i, j].kk - kk) <= epsilone) && (Math.Abs(UserCells[i, j].V - V) <= epsilone) && (Math.Abs(UserCells[i, j].m - m) <= epsilone))
                                {stop = true;}
                            }

